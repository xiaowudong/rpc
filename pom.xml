<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.xwd</groupId>
		<artifactId>mavenConf</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>
	<groupId>xwd.study</groupId>
	<artifactId>rpc</artifactId>
	<packaging>pom</packaging>
	<properties>
		<!-- 文件拷贝时的编码 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- 编译时的编码 -->
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
	</properties>
	<dependencies>
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>${netty.version}</version>
		</dependency>
		<dependency>
			<groupId>io.protostuff</groupId>
			<artifactId>protostuff-core</artifactId>
			<version>${protostuff.version}</version>
		</dependency>
		<dependency>
			<groupId>org.objenesis</groupId>
			<artifactId>objenesis</artifactId>
			<version>${objenesis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.xerial.snappy</groupId>
			<artifactId>snappy-java</artifactId>
			<version>${snappy.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.esotericsoftware.kryo</groupId>
			<artifactId>kryo</artifactId>
			<version>${kryo.version}</version>
		</dependency>
		<dependency>
			<groupId>net.bytebuddy</groupId>
			<artifactId>byte-buddy</artifactId>
			<version>${bytebuddy.version}</version>
		</dependency>
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>${cglib.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-framework.version}</version>
		</dependency>
		<dependency>
		    <groupId>io.protostuff</groupId>
		    <artifactId>protostuff-runtime</artifactId>
		    <version>${protostuff.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback-classic.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<modules>
		<module>rpc-demo</module><!-- 简单rpc样例 -->
		<module>rpc-common</module><!-- 存放一些比较公用的工具类，例如反射工具类，logger工具类，公用的Entity,自定义的异常 -->
		<module>rpc-remoting</module><!-- 一个RPC框架，是离不开对网络的支持的，Laopopo是使用Netty4来支持网络数据传输的，protostuff做序列化工具，这个模块，用来完成网络模块的功能的 -->
		<module>rpc-registry</module><!-- 注册中心抽象模块，定义注册中心一些基本的功能，比如接收提供者的提供的服务信息，接收订阅者的某个服务订阅请求，且返回订阅结果等等，简而言之，这个模块主要用于定义注册中心的接口 -->
		<module>rpc-registry-default</module><!-- 注册中心基于内存的实现，因为注册中心的实现方式有很多种，基于java内存的，基于zookeeper的，基于consul的，所以才会有了laopopo-registry这个抽象模块，才会有了laopopo-registry-default这个基于java内存实现的默认模块，本系列目前只完成对java内存的实现 -->
		<module>rpc-client</module><!-- 消费端和提供者端的所有逻辑代码在此模块实现，也就是说如果某个业务逻辑项目需要有RPC的功能的话，只需要maven引入此模块的依赖就可以了，当然此模块也会依赖common和remoting模块，因为这是基础模块嘛 -->
		<module>rpc-monitor</module><!-- 顾名思义就知道这是监控模块，用来统计一些调用信息，做一些数据统计和反馈 -->
		<module>rpc-spring-support</module><!-- 完成rpc对spring的基本支持 -->
		<module>rpc-console</module><!-- 提供一个web端的管理页面 -->
		<module>rpc-example</module>
    <module>rpc-netty</module>
  </modules>
</project>